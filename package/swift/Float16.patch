diff --git a/stdlib/public/runtime/Float16Support.cpp b/stdlib/public/runtime/Float16Support.cpp
index 817739d4cdf..046327e491b 100644
--- a/stdlib/public/runtime/Float16Support.cpp
+++ b/stdlib/public/runtime/Float16Support.cpp
@@ -15,6 +15,7 @@
 // __gnu_h2f_ieee
 // __gnu_f2h_ieee
 // __truncdfhf2
+// __multi3
 //
 // On Darwin platforms, these are provided by the host compiler-rt, but we
 // can't depend on that everywhere, so we have to provide them in the Swift
@@ -27,9 +28,65 @@
 //
 //===----------------------------------------------------------------------===//
 
+ #include "../SwiftShims/Visibility.h"
+ #include <endian.h>
+ #include <stdint.h>
+ #include <climits>
+
+ // PowerPC 32-bit Glibc does not provide __multi3
+ #if defined(__powerpc__)
+
+ typedef int int128_t __attribute__((mode(TI)));
+ typedef unsigned int uint128_t __attribute__((mode(TI)));
+
+ typedef union {
+   int128_t all;
+   struct {
+ #if __BYTE_ORDER == __LITTLE_ENDIAN
+     uint64_t low;
+     int64_t high;
+ #else
+     int64_t high;
+     uint64_t low;
+ #endif
+   } s;
+ } twords;
+
+ SWIFT_RUNTIME_EXPORT int64_t __mulddi3(uint64_t a, uint64_t b) {
+   twords r;
+   const int bits_in_dword_2 = (int)(sizeof(int64_t) * CHAR_BIT) / 2;
+   const uint64_t lower_mask = (uint64_t)~0 >> bits_in_dword_2;
+   r.s.low = (a & lower_mask) * (b & lower_mask);
+   uint64_t t = r.s.low >> bits_in_dword_2;
+   r.s.low &= lower_mask;
+   t += (a >> bits_in_dword_2) * (b & lower_mask);
+   r.s.low += (t & lower_mask) << bits_in_dword_2;
+   r.s.high = t >> bits_in_dword_2;
+   t = r.s.low >> bits_in_dword_2;
+   r.s.low &= lower_mask;
+   t += (b >> bits_in_dword_2) * (a & lower_mask);
+   r.s.low += (t & lower_mask) << bits_in_dword_2;
+   r.s.high += t >> bits_in_dword_2;
+   r.s.high += (a >> bits_in_dword_2) * (b >> bits_in_dword_2);
+   return r.all;
+ }
+
+ SWIFT_RUNTIME_EXPORT int64_t __multi3(int128_t a, int128_t b) {
+   twords x;
+   x.all = a;
+   twords y;
+   y.all = b;
+   twords r;
+   r.all = __mulddi3(x.s.low, y.s.low);
+   r.s.high += x.s.high * y.s.low + x.s.low * y.s.high;
+   return r.all;
+ }
+
+ #endif
+
 // Android NDK <r21 do not provide `__aeabi_d2h` in the compiler runtime,
 // provide shims in that case.
-#if (defined(__ANDROID__) && defined(__ARM_ARCH_7A__) && defined(__ARM_EABI__)) || \
+#if ((defined(__ANDROID__) || defined(__linux__)) && (defined(__arm__) || (defined(__riscv) && __riscv_xlen == 64) || defined(__powerpc__) || (defined(__powerpc64__) && defined(__LITTLE_ENDIAN__)))) || \
   ((defined(__i386__) || defined(__i686__) || defined(__x86_64__)) && !defined(__APPLE__))
 
 #include "../SwiftShims/Visibility.h"
