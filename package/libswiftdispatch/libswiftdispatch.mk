### Grand Central Dispatch with Swift overlay
LIBSWIFTDISPATCH_VERSION = 5.7
LIBSWIFTDISPATCH_SITE = $(call github,apple,swift-corelibs-libdispatch,swift-$(LIBSWIFTDISPATCH_VERSION)-RELEASE)
LIBSWIFTDISPATCH_LICENSE = Apache-2.0
LIBSWIFTDISPATCH_LICENSE_FILES = LICENSE
LIBSWIFTDISPATCH_INSTALL_STAGING = YES
LIBSWIFTDISPATCH_INSTALL_TARGET = YES
LIBSWIFTDISPATCH_SUPPORTS_IN_SOURCE_BUILD = NO
LIBSWIFTDISPATCH_DEPENDENCIES = libbsd swift

LIBSWIFTDISPATCH_CONF_OPTS += \
    -DLibRT_LIBRARIES="${STAGING_DIR}/usr/lib/librt.a" \
    -DENABLE_SWIFT=YES \
	-DCMAKE_Swift_FLAGS=${SWIFTC_FLAGS} \
	-DCMAKE_Swift_FLAGS_DEBUG="" \
	-DCMAKE_Swift_FLAGS_RELEASE="" \
	-DCMAKE_Swift_FLAGS_RELWITHDEBINFO="" \

ifeq (LIBSWIFTDISPATCH_SUPPORTS_IN_SOURCE_BUILD),YES)
LIBSWIFTDISPATCH_BUILDDIR			= $(LIBSWIFTDISPATCH_SRCDIR)
else
LIBSWIFTDISPATCH_BUILDDIR			= $(LIBSWIFTDISPATCH_SRCDIR)/build
endif

define LIBSWIFTDISPATCH_CONFIGURE_CMDS
	# Configure for Ninja
	(mkdir -p $(LIBSWIFTDISPATCH_BUILDDIR) && \
	cd $(LIBSWIFTDISPATCH_BUILDDIR) && \
	rm -f CMakeCache.txt && \
	PATH=$(BR_PATH):$(SWIFT_NATIVE_PATH) \
	$(LIBSWIFTDISPATCH_CONF_ENV) $(BR2_CMAKE) -S $(LIBSWIFTDISPATCH_SRCDIR) -B $(LIBSWIFTDISPATCH_BUILDDIR) -G Ninja \
		-DCMAKE_INSTALL_PREFIX="$(STAGING_DIR)/usr" \
		-DCMAKE_COLOR_MAKEFILE=OFF \
		-DBUILD_DOC=OFF \
		-DBUILD_DOCS=OFF \
		-DBUILD_EXAMPLE=OFF \
		-DBUILD_EXAMPLES=OFF \
		-DBUILD_TEST=OFF \
		-DBUILD_TESTS=OFF \
		-DBUILD_TESTING=OFF \
		-DBUILD_SHARED_LIBS=ON \
		-DCMAKE_BUILD_TYPE=$(if $(BR2_ENABLE_RUNTIME_DEBUG),Debug,Release) \
    	-DCMAKE_C_COMPILER=$(SWIFT_NATIVE_PATH)/clang \
    	-DCMAKE_CXX_COMPILER=$(SWIFT_NATIVE_PATH)/clang++ \
		-DCMAKE_C_FLAGS="-w -fuse-ld=lld -target $(SWIFT_TARGET_NAME) --sysroot=$(STAGING_DIR) $(SWIFT_EXTRA_FLAGS) -I$(STAGING_DIR)/usr/include -B$(STAGING_DIR)/usr/lib -B$(HOST_DIR)/lib/gcc/$(GNU_TARGET_NAME)/$(call qstrip,$(BR2_GCC_VERSION)) -L$(HOST_DIR)/lib/gcc/$(GNU_TARGET_NAME)/$(call qstrip,$(BR2_GCC_VERSION))" \
		-DCMAKE_C_LINK_FLAGS="-target $(SWIFT_TARGET_NAME) --sysroot=$(STAGING_DIR)" \
		-DCMAKE_CXX_FLAGS="-w -fuse-ld=lld -target $(SWIFT_TARGET_NAME) --sysroot=$(STAGING_DIR) $(SWIFT_EXTRA_FLAGS) -I$(STAGING_DIR)/usr/include -I$(HOST_DIR)/$(GNU_TARGET_NAME)/include/c++/$(call qstrip,$(BR2_GCC_VERSION))/ -I$(HOST_DIR)/$(GNU_TARGET_NAME)/include/c++/$(call qstrip,$(BR2_GCC_VERSION))/$(GNU_TARGET_NAME) -B$(STAGING_DIR)/usr/lib -B$(HOST_DIR)/lib/gcc/$(GNU_TARGET_NAME)/$(call qstrip,$(BR2_GCC_VERSION)) -L$(HOST_DIR)/lib/gcc/$(GNU_TARGET_NAME)/$(call qstrip,$(BR2_GCC_VERSION))" \
		-DCMAKE_CXX_LINK_FLAGS="-target $(SWIFT_TARGET_NAME) --sysroot=$(STAGING_DIR)" \
		$(LIBSWIFTDISPATCH_CONF_OPTS) \
	)
endef

define LIBSWIFTDISPATCH_BUILD_CMDS
	# Compile
	(cd $(LIBSWIFTDISPATCH_BUILDDIR) && ninja)
endef

define LIBSWIFTDISPATCH_INSTALL_TARGET_CMDS
	(cd $(LIBSWIFTDISPATCH_BUILDDIR) && \
	cp ./*.so $(TARGET_DIR)/usr/lib/ \
	)
endef

define LIBSWIFTDISPATCH_INSTALL_STAGING_CMDS
	(cd $(LIBSWIFTDISPATCH_BUILDDIR) && ninja install)
endef

$(eval $(generic-package))
